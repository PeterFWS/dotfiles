#!/bin/bash

# curl -s https://raw.githubusercontent.com/lesurp/dotfiles/master/.bin/vasygros | bash

# fuse2 is erquired to run nvim from the AppImage
# node / npm are for the cocnvim runtime
# xclip for clipboard support
# cppman is an offline cpp std lib documentation
read -d '' PACMAN_PACKAGES << EOF
wget curl sudo zsh git kitty which firefox readline xorg-xinit python-pip

i3 dmenu network-manager network-manager-applet dunst

fuse2 nodejs npm xclip

clang clang++ cppman cmake
EOF

# Those are to be installed with cargo
read -d '' CARGO_PACKAGES << EOF
ripgrep
EOF


############################################## GLOBAL VARS
# Stores variables set by each module of this script
# This allows to handle updates
DOTFILES_STATUS_FILE=$HOME/.dotfiles.status
if [ -f $DOTFILES_STATUS_FILE ]; then
    source $DOTFILES_STATUS_FILE
fi

# Each module should append its configuration to this variable
# We stores its value to the above file
DOTFILES_STATUS_OUT=""
dotfiles_append_out() {
    DOTFILES_STATUS_OUT+="$1=${!1}\n"
}

# Each config should use this when saving state
# Don't forget that the variables may be empty!
TRUE=0

# avoid using the root pass if sudo is installed (as it might not be known)
# otherwise use su and install sudo in the process
# this is done only once to avoid e.g. installing sudo during the script and breaking everything else
# this also requires only one password prompt
if hash sudo 2>/dev/null
then
    root_cmd="sudo sh -c"
else
    root_cmd="su -c"
fi

############################################## SYSTEM PACKAGE INSTALL
### found from pacapt
# Detect package type from /etc/issue
# and set the package_man variable to the corresponding keyword
found_arch() {
    grep -qis "$2" /etc/issue && package_man="$1"
}

# Detect package type
find_package_manager() {
    found_arch PACMAN "Arch Linux" && return
    found_arch DPKG   "Debian GNU/Linux" && return
    found_arch DPKG   "Ubuntu" && return
    #found_arch YUM    "CentOS" && return
    #found_arch YUM    "Red Hat" && return
    #found_arch YUM    "Fedora" && return
    #found_arch ZYPPER "SUSE" && return
    echo "Couldn't detect OS type (or it's not supported). Exiting..."
    exit 1
}

find_update_cmd() {
    case $1 in
        PACMAN) update_cmd="pacman -Syu --noconfirm"; return;;
        DPKG)   update_cmd="apt-get update; apt-get upgrade -y"; return;;
        YUM)    update_cmd="yum"; return;;
        ZYPPER) update_cmd="zypper"; return;;
    esac
}

find_install_cmd() {
    case $1 in
        PACMAN) install_cmd="pacman -S --noconfirm"; return;;
        DPKG)   install_cmd="apt-get install"; return;;
        YUM)    install_cmd="yum"; return;;
        ZYPPER) install_cmd="zypper"; return;;
    esac
}

initialize_package_manager() {
    find_package_manager
    # used to update the package list, and upgrade the packages themselves
    find_update_cmd $package_man
    # used to install any new package
    find_install_cmd $package_man
    ${root_cmd} "$update_cmd"
}

# also setup zsh as the user's default shell
install_packages() {
    # this is needed because xargs SUCKS
    local packages=$(sed 's/ /\n/g' <<< $@)
    # avoid stopping on non-existing packages (for different package managers)
    install_all_pkgs="echo \"$packages\" | xargs -I{} $install_cmd {}"
    ${root_cmd} "$install_all_pkgs"
}

install_system_packages() {
    initialize_package_manager

    if [ "$DOTFILES_STATUS_SYSTEM_INSTALLED" -eq $TRUE ]; then
    else
        install_packages $@
    fi

    DOTFILES_STATUS_SYSTEM_INSTALLED=$TRUE
    dotfiles_append_out DOTFILES_STATUS_SYSTEM_INSTALLED
}
############################################## SYSTEM PACKAGE INSTALL END

############################################## INSTALL NEOVIM
NVIM_LOCATION=$HOME/.bin/nvim
NVIM_CONFIG_DIR=$HOME/.config/nvim

install_nvim() {
    wget https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage -O $NVIM_LOCATION
    chmod +x $NVIM_LOCATION

    if [ "$DOTFILES_STATUS_NVIM_INSTALLED" -eq $TRUE ]; then
        $NVIM_LOCATION +PlugUpdate +qa
    else
        curl -fLo $NVIM_CONFIG_DIR/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        $NVIM_LOCATION +PlugInstall +qa
        pip3 install neovim-remote --user
    fi

    DOTFILES_STATUS_NVIM_INSTALLED=$TRUE
    dotfiles_append_out DOTFILES_STATUS_NVIM_INSTALLED
}

############################################## INSTALL CONFIG
CONFIG_REPO=https://github.com/lesurp/dotfiles
CONFIG_LOCATION=.dotfiles

install_dotfiles() {
    if [ "$DOTFILES_STATUS_CONFIG_INSTALLED" -eq $TRUE ]; then
        dotfiles_append_out DOTFILES_STATUS_CONFIG_INSTALLED
        return
    fi

    git clone --bare $CONFIG_REPO $CONFIG_LOCATION
    config="git --git-dir=${CONFIG_LOCATION} --work-tree=${HOME}"
    $config config status.showUntrackedFiles no
    # if this is an interactive shell, prompt the user for a new branch name for this config
    if [ -t 1 ]
    then
        echo "The existing configurations are:"
        $config branch -r | tail -n +2 | cut -d"/" -f2
        echo "Enter a desired config. If it doesn't exist, it will be created based on master."
        readline -a branch_name
        $config checkout -B ${branch_name[0]}
    else
        $config checkout master
    fi

    DOTFILES_STATUS_CONFIG_INSTALLED=$TRUE
    dotfiles_append_out DOTFILES_STATUS_CONFIG_INSTALLED
}

############################################## INSTALL ZSH
ZSH_HOME=$HOME/.zsh
ZSH_COMPLETIONS=$ZSH_HOME/completions

install_zsh() {
    mkdir -p $ZSH_COMPLETIONS

    local user=$(whoami)
    ${root_cmd} chsh -s $(which zsh) $user
}

############################################## INSTALL RUSTUP / CARGO
install_rustup() {
    if [ "$DOTFILES_STATUS_RUSTUP_INSTALLED" -eq $TRUE ]; then
        rustup update
    else
        curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly -y
        DOTFILES_STATUS_RUSTUP_INSTALLED=$TRUE
    fi
    rustup component add rust-src
    rustup completions zsh > $ZSH_COMPLETIONS/_rustup
    rustup completions zsh cargo > $ZSH_COMPLETIONS/_cargo
    cargo install "${CARGO_PACKAGES}"

    dotfiles_append_out DOTFILES_STATUS_RUSTUP_INSTALLED
}

install_system_packages "$PACMAN_PACKAGES"
install_dotfiles
install_nvim
install_zsh
install_rustup

# Save the conf
printf "$DOTFILES_STATUS_OUT" > $DOTFILES_STATUS_FILE
