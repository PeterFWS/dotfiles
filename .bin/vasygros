#!/bin/bash

# curl -s https://raw.githubusercontent.com/lesurp/dotfiles/master/.bin/vasygros | bash

read -d '' GENERAL_PACKAGES << EOF
wget curl sudo zsh git kitty which firefox readline xorg-xinit python-pip
EOF

read -d '' I3_PACKAGES << EOF
i3 dmenu network-manager network-manager-applet dunst
EOF

# fuse2 is erquired to run nvim from the AppImage
# node / npm are for the cocnvim runtime
# xclip for clipboard support
read -d '' NVIM_PACKAGES << EOF
fuse2 nodejs npm xclip
EOF

read -d '' CPP_PACKAGES << EOF
clang clang++ cppman cmake
EOF

NVIM_LOCATION=$HOME/.bin/nvim
NVIM_CONFIG_DIR=$HOME/.config/nvim
DOTFILES_REPO=https://github.com/lesurp/dotfiles
DOTFILES_LOCATION=.dotfiles

###############
### found from pacapt
# Detect package type from /etc/issue
# and set the package_man variable to the corresponding keyword
found_arch() {
    grep -qis "$2" /etc/issue && package_man="$1"
}

# Detect package type
find_package_manager() {
    found_arch PACMAN "Arch Linux" && return
    found_arch DPKG   "Debian GNU/Linux" && return
    found_arch DPKG   "Ubuntu" && return
    #found_arch YUM    "CentOS" && return
    #found_arch YUM    "Red Hat" && return
    #found_arch YUM    "Fedora" && return
    #found_arch ZYPPER "SUSE" && return
    echo "Couldn't detect OS type (or it's not supported). Exiting..."
    exit 1
}

get_update_cmd() {
    case $1 in
        PACMAN) update_cmd="pacman -Syu --noconfirm"; return;;
        DPKG)   update_cmd="apt-get update; apt-get upgrade -y"; return;;
        YUM)    update_cmd="yum"; return;;
        ZYPPER) update_cmd="zypper"; return;;
    esac
}

get_install_cmd() {
    case $1 in
        PACMAN) install_cmd="pacman -S --noconfirm"; return;;
        DPKG)   install_cmd="apt-get install"; return;;
        YUM)    install_cmd="yum"; return;;
        ZYPPER) install_cmd="zypper"; return;;
    esac
}

# we do this once at the beginning, because when we install sudo during the script,
# a second detection will then try to use it despite the suoders file not being
# configured. And even if it were it'd require another password prompt...
get_root_cmd() {
    # avoid using the root pass if sudo is installed (as it might not be known)
    # otherwise use su and install sudo in the process
    if hash sudo 2>/dev/null
    then
        root_cmd="sudo sh -c"
    else
        root_cmd="su -c"
    fi
}

# also setup zsh as the user's default shell
install_packages() {
    # this is needed because xargs SUCKS
    local packages=$(sed 's/ /\n/g' <<< $@)
    # avoid stopping on non-existing packages (for different package managers)
    install_all_pkgs="echo \"$packages\" | xargs -I{} $install_cmd {}"


    local user=$(whoami)
    ${root_cmd} "$update_cmd
    $install_all_pkgs
    chsh -s $(which zsh) $user"
}

install_nvim() {
    wget https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage -O $NVIM_LOCATION
    chmod +x $NVIM_LOCATION
    curl -fLo $NVIM_CONFIG_DIR/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    $NVIM_LOCATION +PlugInstall +qa
    pip3 install neovim-remote --user
}

install_dotfiles() {
    git clone --bare $DOTFILES_REPO $DOTFILES_LOCATION
    alias config="git --git-dir=${DOTFILES_LOCATION} --work-tree=${HOME}"
    config config status.showUntrackedFiles no
    # if this is an interactive shell, prompt the user for a new branch name for this config
    if [ -t 1 ]
    then
        echo "The existing configurations are:"
        config branch -r | tail -n +2 | cut -d"/" -f2
        echo "Enter a desired config. If it doesn't exist, it will be created based on master."
        readline -a branch_name
        config checkout -B ${branch_name[0]}
    else
        config checkout master
    fi
}

find_package_manager
get_update_cmd $package_man
get_install_cmd $package_man
get_root_cmd
install_packages "$GENERAL_PACKAGES"
install_packages "$I3_PACKAGES"
install_packages "$NVIM_PACKAGES"
install_packages "$CPP_PACKAGES"
install_nvim
install_dotfiles
